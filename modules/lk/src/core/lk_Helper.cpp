/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Helper
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "lk/Helper.h"

using namespace lk;

/** lk::Helper::Helper()
 * include/lk/Helper.h:43
 */
static int Helper_Helper(lua_State *L) {
  try {
    Helper *retval__ = new Helper();
    dub_pushudata(L, retval__, "lk.Helper", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Helper: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Helper: Unknown exception");
  }
  return dub_error(L);
}

/** lk::Helper::~Helper()
 * include/lk/Helper.h:45
 */
static int Helper__Helper(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "lk.Helper"));
    if (userdata->gc) {
      Helper *self = (Helper *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~Helper: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~Helper: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize lk::Helper::spawn(const char *script, lua_State *L)
 * include/lk/Helper.h:50
 */
static int Helper_spawn(lua_State *L) {
  try {
    Helper *self = *((Helper **)dub_checksdata(L, 1, "lk.Helper"));
    const char *script = dub_checkstring(L, 2);
    return self->spawn(script, L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "spawn: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "spawn: Unknown exception");
  }
  return dub_error(L);
}

/** int lk::Helper::waitpid(int pid)
 * include/lk/Helper.h:54
 */
static int Helper_waitpid(lua_State *L) {
  try {
    Helper *self = *((Helper **)dub_checksdata(L, 1, "lk.Helper"));
    int pid = dub_checkint(L, 2);
    lua_pushnumber(L, self->waitpid(pid));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "waitpid: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "waitpid: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize lk::Helper::execPath(lua_State *L)
 * include/lk/Helper.h:58
 */
static int Helper_execPath(lua_State *L) {
  try {
    Helper *self = *((Helper **)dub_checksdata(L, 1, "lk.Helper"));
    return self->execPath(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "execPath: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "execPath: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int Helper___tostring(lua_State *L) {
  Helper *self = *((Helper **)dub_checksdata_n(L, 1, "lk.Helper"));
  lua_pushfstring(L, "lk.Helper: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Helper_member_methods[] = {
  { "new"          , Helper_Helper        },
  { "__gc"         , Helper__Helper       },
  { "spawn"        , Helper_spawn         },
  { "waitpid"      , Helper_waitpid       },
  { "execPath"     , Helper_execPath      },
  { "__tostring"   , Helper___tostring    },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_lk_Helper(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "lk.Helper");
  // <mt>

  // register member methods
  luaL_register(L, NULL, Helper_member_methods);
  // save meta-table in lk
  dub_register(L, "lk", "Helper", "Helper");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
