/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for library lk_core
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "lk/Debug.h"
#include "lk/Finalizer.h"
#include "lk/Helper.h"
#include "lk/SelectCallback.h"
#include "lk/Socket.h"
#include "lk/TimeRef.h"
#include "lk/constants.h"

using namespace lk;

extern "C" {
int luaopen_lk_Debug(lua_State *L);
int luaopen_lk_Finalizer(lua_State *L);
int luaopen_lk_Helper(lua_State *L);
int luaopen_lk_SelectCallback(lua_State *L);
int luaopen_lk_Socket(lua_State *L);
int luaopen_lk_TimeRef(lua_State *L);
}

/** static int lk::readable(const char *filename)
 * include/lk/constants.h:39
 */
static int lk_readable(lua_State *L) {
  try {
    const char *filename = dub_checkstring(L, 1);
    lua_pushnumber(L, lk::readable(filename));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "lk.readable: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "lk.readable: Unknown exception");
  }
  return lua_error(L);
}

/** static const char* lk::pushnexttemplate(lua_State *L, const char *path)
 * include/lk/constants.h:47
 */
static int lk_pushnexttemplate(lua_State *L) {
  try {
    const char *path = dub_checkstring(L, 2);
    lua_pushstring(L, lk::pushnexttemplate(L, path));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "lk.pushnexttemplate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "lk.pushnexttemplate: Unknown exception");
  }
  return lua_error(L);
}

/** LuaStackSize lk::findFile(lua_State *L)
 * include/lk/constants.h:60
 */
static int lk_findFile(lua_State *L) {
  try {
    return lk::findFile(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "lk.findFile: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "lk.findFile: Unknown exception");
  }
  return lua_error(L);
}

// --=============================================== FUNCTIONS
static const struct luaL_Reg lk_core_functions[] = {
  { "readable"     , lk_readable          },
  { "pushnexttemplate", lk_pushnexttemplate  },
  { "findFile"     , lk_findFile          },
  { NULL, NULL},
};


extern "C" int luaopen_lk_core(lua_State *L) {
  luaopen_lk_Debug(L);
  luaopen_lk_Finalizer(L);
  luaopen_lk_Helper(L);
  luaopen_lk_SelectCallback(L);
  luaopen_lk_Socket(L);
  luaopen_lk_TimeRef(L);

  // Create the table which will contain all the constants
  lua_getfield(L, LUA_GLOBALSINDEX, "lk_core");
  if (lua_isnil(L, -1)) {
    // no global table called lk_core
    lua_pop(L, 1);
    lua_newtable(L);
    // <lib>
    lua_pushvalue(L, -1);
    // <lib> <lib>
    // _G.lk_core = <lib>
    lua_setglobal(L, "lk_core");
    // <lib>
  }
  // <lib>
  luaL_register(L, NULL, lk_core_functions);
  // <lib>
  lua_pop(L, 1);
  return 0;
}
