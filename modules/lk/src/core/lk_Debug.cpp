/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Debug
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "lk/Debug.h"

using namespace lk;

/** lk::Debug::Debug(lua_State *L)
 * include/lk/Debug.h:44
 */
static int Debug_Debug(lua_State *L) {
  try {
    Debug *retval__ = new Debug(L);
    retval__->pushobject(L, retval__, "lk.Debug", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Debug: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Debug: Unknown exception");
  }
  return dub_error(L);
}

/** virtual lk::Debug::~Debug()
 * include/lk/Debug.h:62
 */
static int Debug__Debug(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "lk.Debug"));
    if (userdata->gc) {
      Debug *self = (Debug *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~Debug: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~Debug: Unknown exception");
  }
  return dub_error(L);
}

/** static LuaStackSize lk::Debug::userdata(lua_State *L)
 * include/lk/Debug.h:71
 */
static int Debug_userdata(lua_State *L) {
  try {
    return Debug::userdata(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "userdata: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "userdata: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int Debug___tostring(lua_State *L) {
  Debug *self = *((Debug **)dub_checksdata_n(L, 1, "lk.Debug"));
  lua_pushfstring(L, "lk.Debug: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Debug_member_methods[] = {
  { "new"          , Debug_Debug          },
  { "__gc"         , Debug__Debug         },
  { "userdata"     , Debug_userdata       },
  { "__tostring"   , Debug___tostring     },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_lk_Debug(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "lk.Debug");
  // <mt>

  // register member methods
  luaL_register(L, NULL, Debug_member_methods);
  // save meta-table in lk
  dub_register(L, "lk", "Debug_core");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
