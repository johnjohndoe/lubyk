/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for library lk
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "lk/Debug.h"
#include "lk/Finalizer.h"
#include "lk/SelectCallback.h"
#include "lk/Socket.h"
#include "lk/TimeRef.h"
#include "lk/globals.h"

using namespace lk;

extern "C" {
int luaopen_lk_Debug(lua_State *L);
int luaopen_lk_Finalizer(lua_State *L);
int luaopen_lk_SelectCallback(lua_State *L);
int luaopen_lk_Socket(lua_State *L);
int luaopen_lk_TimeRef(lua_State *L);
}

/** LuaStackSize lk::spawn(const char *script, lua_State *L)
 * include/lk/globals.h:43
 */
static int lk_spawn(lua_State *L) {
  try {
    const char *script = dub_checkstring(L, 1);
    return lk::spawn(script, L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "lk.spawn: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "lk.spawn: Unknown exception");
  }
  return lua_error(L);
}

/** int lk::waitpid(int pid)
 * include/lk/globals.h:47
 */
static int lk_waitpid(lua_State *L) {
  try {
    int pid = dub_checkint(L, 1);
    lua_pushnumber(L, lk::waitpid(pid));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "lk.waitpid: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "lk.waitpid: Unknown exception");
  }
  return lua_error(L);
}

/** LuaStackSize lk::execPath(lua_State *L)
 * include/lk/globals.h:51
 */
static int lk_execPath(lua_State *L) {
  try {
    return lk::execPath(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "lk.execPath: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "lk.execPath: Unknown exception");
  }
  return lua_error(L);
}

// --=============================================== FUNCTIONS
// Functions from namespace lk
static const struct luaL_Reg lk_functions[] = {
  { "spawn"        , lk_spawn             },
  { "waitpid"      , lk_waitpid           },
  { "execPath"     , lk_execPath          },
  { NULL, NULL},
};


extern "C" int luaopen_lk(lua_State *L) {
  luaopen_lk_Debug(L);
  luaopen_lk_Finalizer(L);
  luaopen_lk_SelectCallback(L);
  luaopen_lk_Socket(L);
  luaopen_lk_TimeRef(L);

  // Create the table which will contain all the constants
  lua_getfield(L, LUA_GLOBALSINDEX, "lk");
  if (lua_isnil(L, -1)) {
    // no global table called lk
    lua_pop(L, 1);
    lua_newtable(L);
    // <lib>
    lua_pushvalue(L, -1);
    // <lib> <lib>
    // _G.lk = <lib>
    lua_setglobal(L, "lk");
    // <lib>
  }
  // <lib>
  luaL_register(L, NULL, lk_functions);
  // <lib>
  lua_pop(L, 1);
  return 0;
}
