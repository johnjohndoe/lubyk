/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class TimeRef
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "lk/TimeRef.h"

using namespace lk;

/** lk::TimeRef::TimeRef()
 * include/lk/TimeRef.h:41
 */
static int TimeRef_TimeRef(lua_State *L) {
  try {
    TimeRef *retval__ = new TimeRef();
    dub_pushudata(L, retval__, "lk.TimeRef", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** lk::TimeRef::~TimeRef()
 * include/lk/TimeRef.h:42
 */
static int TimeRef__TimeRef(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "lk.TimeRef"));
    if (userdata->gc) {
      TimeRef *self = (TimeRef *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** double lk::TimeRef::elapsed()
 * include/lk/TimeRef.h:46
 */
static int TimeRef_elapsed(lua_State *L) {
  try {
    TimeRef *self = *((TimeRef **)dub_checksdata(L, 1, "lk.TimeRef"));
    lua_pushnumber(L, self->elapsed());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "elapsed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "elapsed: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int TimeRef___tostring(lua_State *L) {
  TimeRef *self = *((TimeRef **)dub_checksdata_n(L, 1, "lk.TimeRef"));
  lua_pushfstring(L, "lk.TimeRef: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg TimeRef_member_methods[] = {
  { "new"          , TimeRef_TimeRef      },
  { "__gc"         , TimeRef__TimeRef     },
  { "elapsed"      , TimeRef_elapsed      },
  { "__tostring"   , TimeRef___tostring   },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_lk_TimeRef(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "lk.TimeRef");
  // <mt>

  // register member methods
  luaL_register(L, NULL, TimeRef_member_methods);
  // save meta-table in lk
  dub_register(L, "lk", "TimeRef_core", "TimeRef");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
