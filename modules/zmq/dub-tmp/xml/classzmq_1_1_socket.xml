<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.4">
  <compounddef id="classzmq_1_1_socket" kind="class" prot="public">
    <compoundname>zmq::Socket</compoundname>
    <includes refid="_socket_8h" local="no">Socket.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classzmq_1_1_socket_1a6368feb544053a5a867a590000aeb1de" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Poller</definition>
        <argsstring></argsstring>
        <name>Poller</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="60" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classzmq_1_1_socket_1a069f600701355be727b06d9f2dd7f976" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* zmq::Socket::socket_</definition>
        <argsstring></argsstring>
        <name>socket_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="61" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzmq_1_1_socket_1ab9140c21bb2248b528acac9670634675" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string zmq::Socket::location_</definition>
        <argsstring></argsstring>
        <name>location_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="62" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzmq_1_1_socket_1ad4347e6eaf983accf60cfb5aed31020b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int zmq::Socket::type_</definition>
        <argsstring></argsstring>
        <name>type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="63" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzmq_1_1_socket_1a2494e6be34e6491248e3fc9aae01e79c" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int zmq::Socket::send_flags_</definition>
        <argsstring></argsstring>
        <name>send_flags_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="64" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzmq_1_1_socket_1a2a1ea503ff3a43dd8982e9b105fcea50" prot="private" static="no" mutable="no">
        <type>TimeRef</type>
        <definition>TimeRef zmq::Socket::time_ref_</definition>
        <argsstring></argsstring>
        <name>time_ref_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Timer used for timeout in request. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="68" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classzmq_1_1_socket_1af93cd7bd7fddc66a45e1d721b25dd575" prot="private" static="no" mutable="no">
        <type>lubyk::Worker *</type>
        <definition>lubyk::Worker* zmq::Socket::worker_</definition>
        <argsstring></argsstring>
        <name>worker_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>FIXME: Replace lubyk::Worker with a (lua ensured) zmq::Context singleton. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="72" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classzmq_1_1_socket_1ab20b347056a6dcb162f3deef4ac2a63c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zmq::Socket::Socket</definition>
        <argsstring>(int type, lubyk::Worker *worker)</argsstring>
        <name>Socket</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>lubyk::Worker *</type>
          <declname>worker</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The worker is not provided by LuaObject before luaInit is called. This call happens after full object construction. We need the worker to set the zmq context, so we pass it as argument. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="82" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="78" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classzmq_1_1_socket_1a2844b4299a3e410d88832943b4c6524f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>zmq::Socket::~Socket</definition>
        <argsstring>()</argsstring>
        <name>~Socket</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="109" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="109" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classzmq_1_1_socket_1a6913e6251911ecb39c2d03638e72f3a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int zmq::Socket::fd</definition>
        <argsstring>()</argsstring>
        <name>fd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="117" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="117" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classzmq_1_1_socket_1ab85fbea3c413a711e0ac6589448fb466" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zmq::Socket::setNonBlocking</definition>
        <argsstring>(bool non_blocking)</argsstring>
        <name>setNonBlocking</name>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="126" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="126" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classzmq_1_1_socket_1ad7a88861054408143e59724dd87f6b5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zmq::Socket::setsockopt</definition>
        <argsstring>(int type, lua_State *L)</argsstring>
        <name>setsockopt</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>lua_State *</type>
          <declname>L</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set socket options. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="136" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="136" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classzmq_1_1_socket_1aba886d2247712d2f85cce98f04960226" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zmq::Socket::bind</definition>
        <argsstring>(const char *location)</argsstring>
        <name>bind</name>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bind a service to a location like &quot;tcp://\*:5500&quot; Should NOT be used while in a <ref refid="classzmq_1_1_socket_1a9d6e15efa968134db3ceaf2c6516f4ad" kindref="member">request()</ref> or <ref refid="classzmq_1_1_socket_1ac9afea253b7419e252a348b06a09fb46" kindref="member">recv()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="189" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="189" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classzmq_1_1_socket_1a5bb530a06ae28aed7e9b26094045d541" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int zmq::Socket::bind</definition>
        <argsstring>(int min_port=2000, int max_port=20000, int retries=100)</argsstring>
        <name>bind</name>
        <param>
          <type>int</type>
          <declname>min_port</declname>
          <defval>2000</defval>
        </param>
        <param>
          <type>int</type>
          <declname>max_port</declname>
          <defval>20000</defval>
        </param>
        <param>
          <type>int</type>
          <declname>retries</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bind to a random port. Should NOT be used while in a <ref refid="classzmq_1_1_socket_1a9d6e15efa968134db3ceaf2c6516f4ad" kindref="member">request()</ref> or <ref refid="classzmq_1_1_socket_1ac9afea253b7419e252a348b06a09fb46" kindref="member">recv()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="199" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="199" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classzmq_1_1_socket_1a1fb452e66fbc3080430b07b18d53772e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zmq::Socket::connect</definition>
        <argsstring>(const char *location)</argsstring>
        <name>connect</name>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Connect to a server. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="220" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="220" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classzmq_1_1_socket_1ae65e9573a8dcc32dc83242aec20a29ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmq::Socket::hasEvent</definition>
        <argsstring>(int event)</argsstring>
        <name>hasEvent</name>
        <param>
          <type>int</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return true if the socket responds to the given event. This has to be used when we do not use zmq_poll but some external poll/select on the file descriptor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="230" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="230" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classzmq_1_1_socket_1ac9afea253b7419e252a348b06a09fb46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>LuaStackSize</type>
        <definition>LuaStackSize zmq::Socket::recv</definition>
        <argsstring>(lua_State *L)</argsstring>
        <name>recv</name>
        <param>
          <type>lua_State *</type>
          <declname>L</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Receive a message (blocks). Should NOT be used while already in a <ref refid="classzmq_1_1_socket_1a9d6e15efa968134db3ceaf2c6516f4ad" kindref="member">request()</ref> or <ref refid="classzmq_1_1_socket_1ac9afea253b7419e252a348b06a09fb46" kindref="member">recv()</ref>. For a server, this should typically be used inside the loop. We pass the lua_State to avoid mixing thread contexts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="244" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="244" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classzmq_1_1_socket_1a8c9e876a842883a8a25c4647ec1039c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmq::Socket::send</definition>
        <argsstring>(lua_State *L)</argsstring>
        <name>send</name>
        <param>
          <type>lua_State *</type>
          <declname>L</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a message packed with msgpack. Varying parameters. Can throw a dub::Exception. <simplesect kind="return"><para>false in case the send buffer is full. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="271" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="271" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classzmq_1_1_socket_1adb9c798cb32e1b4b2a1488f6d509adc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool zmq::Socket::rawSend</definition>
        <argsstring>(lua_State *L)</argsstring>
        <name>rawSend</name>
        <param>
          <type>lua_State *</type>
          <declname>L</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends raw bytes without using msgpack. <simplesect kind="return"><para>false in case the send buffer is full. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="296" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="296" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classzmq_1_1_socket_1a9d6e15efa968134db3ceaf2c6516f4ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>LuaStackSize</type>
        <definition>LuaStackSize zmq::Socket::request</definition>
        <argsstring>(lua_State *L)</argsstring>
        <name>request</name>
        <param>
          <type>lua_State *</type>
          <declname>L</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Request = remote call. Can be used by multiple threads. Can throw dub::Exception. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="314" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="314" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="classzmq_1_1_socket_1a2db0d2f61412a6acaa0ba92bf12dd942" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* zmq::Socket::location</definition>
        <argsstring>()</argsstring>
        <name>location</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="387" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="387" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="classzmq_1_1_socket_1a283c0ffa93cb186a8de58739b0eef914" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int zmq::Socket::port</definition>
        <argsstring>()</argsstring>
        <name>port</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="391" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="391" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classzmq_1_1_socket_1afffa4ad08098ae2356b42efa851b5e1f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* zmq::Socket::type</definition>
        <argsstring>() const </argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a string representing the socket type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="402" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="402" bodyend="415"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classzmq_1_1_socket_1a006ba13cc78ab465f381d84223db097b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zmq::Socket::throw_bind_error</definition>
        <argsstring>(int err, const char *location)</argsstring>
        <name>throw_bind_error</name>
        <param>
          <type>int</type>
          <declname>err</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="419" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="419" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classzmq_1_1_socket_1abf9a79140e1b334387bb8962ae87b18b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zmq::Socket::throw_recv_error</definition>
        <argsstring>(int err)</argsstring>
        <name>throw_recv_error</name>
        <param>
          <type>int</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="439" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="439" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classzmq_1_1_socket_1a2004a53949cd7211ef1d2c0a8855d7bb" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zmq::Socket::throw_poll_error</definition>
        <argsstring>(int err)</argsstring>
        <name>throw_poll_error</name>
        <param>
          <type>int</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="455" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="455" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="classzmq_1_1_socket_1aefd91d4db525ae071c63bf201798e8bc" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void zmq::Socket::throw_send_error</definition>
        <argsstring>(int err)</argsstring>
        <name>throw_send_error</name>
        <param>
          <type>int</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="466" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="466" bodyend="480"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ZeroMQ <ref refid="classzmq_1_1_socket" kindref="compound">Socket</ref>.</para><para><simplesect kind="par"><title>Bindings info:</title><para>push: pushobject register: Socket_core string_format: %s (%s) string_args: self-&gt;<ref refid="classzmq_1_1_socket_1a2db0d2f61412a6acaa0ba92bf12dd942" kindref="member">location()</ref>, self-&gt;<ref refid="classzmq_1_1_socket_1afffa4ad08098ae2356b42efa851b5e1f" kindref="member">type()</ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" line="59" bodyfile="/home/gaspard/git/lubyk/modules/zmq/include/zmq/Socket.h" bodystart="58" bodyend="481"/>
    <listofallmembers>
      <member refid="classzmq_1_1_socket_1aba886d2247712d2f85cce98f04960226" prot="public" virt="non-virtual"><scope>zmq::Socket</scope><name>bind</name></member>
      <member refid="classzmq_1_1_socket_1a5bb530a06ae28aed7e9b26094045d541" prot="public" virt="non-virtual"><scope>zmq::Socket</scope><name>bind</name></member>
      <member refid="classzmq_1_1_socket_1a1fb452e66fbc3080430b07b18d53772e" prot="public" virt="non-virtual"><scope>zmq::Socket</scope><name>connect</name></member>
      <member refid="classzmq_1_1_socket_1a6913e6251911ecb39c2d03638e72f3a3" prot="public" virt="non-virtual"><scope>zmq::Socket</scope><name>fd</name></member>
      <member refid="classzmq_1_1_socket_1ae65e9573a8dcc32dc83242aec20a29ec" prot="public" virt="non-virtual"><scope>zmq::Socket</scope><name>hasEvent</name></member>
      <member refid="classzmq_1_1_socket_1a2db0d2f61412a6acaa0ba92bf12dd942" prot="public" virt="non-virtual"><scope>zmq::Socket</scope><name>location</name></member>
      <member refid="classzmq_1_1_socket_1ab9140c21bb2248b528acac9670634675" prot="private" virt="non-virtual"><scope>zmq::Socket</scope><name>location_</name></member>
      <member refid="classzmq_1_1_socket_1a6368feb544053a5a867a590000aeb1de" prot="private" virt="non-virtual"><scope>zmq::Socket</scope><name>Poller</name></member>
      <member refid="classzmq_1_1_socket_1a283c0ffa93cb186a8de58739b0eef914" prot="public" virt="non-virtual"><scope>zmq::Socket</scope><name>port</name></member>
      <member refid="classzmq_1_1_socket_1adb9c798cb32e1b4b2a1488f6d509adc1" prot="public" virt="non-virtual"><scope>zmq::Socket</scope><name>rawSend</name></member>
      <member refid="classzmq_1_1_socket_1ac9afea253b7419e252a348b06a09fb46" prot="public" virt="non-virtual"><scope>zmq::Socket</scope><name>recv</name></member>
      <member refid="classzmq_1_1_socket_1a9d6e15efa968134db3ceaf2c6516f4ad" prot="public" virt="non-virtual"><scope>zmq::Socket</scope><name>request</name></member>
      <member refid="classzmq_1_1_socket_1a8c9e876a842883a8a25c4647ec1039c7" prot="public" virt="non-virtual"><scope>zmq::Socket</scope><name>send</name></member>
      <member refid="classzmq_1_1_socket_1a2494e6be34e6491248e3fc9aae01e79c" prot="private" virt="non-virtual"><scope>zmq::Socket</scope><name>send_flags_</name></member>
      <member refid="classzmq_1_1_socket_1ab85fbea3c413a711e0ac6589448fb466" prot="public" virt="non-virtual"><scope>zmq::Socket</scope><name>setNonBlocking</name></member>
      <member refid="classzmq_1_1_socket_1ad7a88861054408143e59724dd87f6b5e" prot="public" virt="non-virtual"><scope>zmq::Socket</scope><name>setsockopt</name></member>
      <member refid="classzmq_1_1_socket_1ab20b347056a6dcb162f3deef4ac2a63c" prot="public" virt="non-virtual"><scope>zmq::Socket</scope><name>Socket</name></member>
      <member refid="classzmq_1_1_socket_1a069f600701355be727b06d9f2dd7f976" prot="private" virt="non-virtual"><scope>zmq::Socket</scope><name>socket_</name></member>
      <member refid="classzmq_1_1_socket_1a006ba13cc78ab465f381d84223db097b" prot="private" virt="non-virtual"><scope>zmq::Socket</scope><name>throw_bind_error</name></member>
      <member refid="classzmq_1_1_socket_1a2004a53949cd7211ef1d2c0a8855d7bb" prot="private" virt="non-virtual"><scope>zmq::Socket</scope><name>throw_poll_error</name></member>
      <member refid="classzmq_1_1_socket_1abf9a79140e1b334387bb8962ae87b18b" prot="private" virt="non-virtual"><scope>zmq::Socket</scope><name>throw_recv_error</name></member>
      <member refid="classzmq_1_1_socket_1aefd91d4db525ae071c63bf201798e8bc" prot="private" virt="non-virtual"><scope>zmq::Socket</scope><name>throw_send_error</name></member>
      <member refid="classzmq_1_1_socket_1a2a1ea503ff3a43dd8982e9b105fcea50" prot="private" virt="non-virtual"><scope>zmq::Socket</scope><name>time_ref_</name></member>
      <member refid="classzmq_1_1_socket_1afffa4ad08098ae2356b42efa851b5e1f" prot="public" virt="non-virtual"><scope>zmq::Socket</scope><name>type</name></member>
      <member refid="classzmq_1_1_socket_1ad4347e6eaf983accf60cfb5aed31020b" prot="private" virt="non-virtual"><scope>zmq::Socket</scope><name>type_</name></member>
      <member refid="classzmq_1_1_socket_1af93cd7bd7fddc66a45e1d721b25dd575" prot="private" virt="non-virtual"><scope>zmq::Socket</scope><name>worker_</name></member>
      <member refid="classzmq_1_1_socket_1a2844b4299a3e410d88832943b4c6524f" prot="public" virt="non-virtual"><scope>zmq::Socket</scope><name>~Socket</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
