/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for library zmq
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "zmq/Context.h"
#include "zmq/Poller.h"
#include "zmq/Socket.h"
#include "zmq/constants.h"

using namespace zmq;

extern "C" {
int luaopen_zmq_Context(lua_State *L);
int luaopen_zmq_Poller(lua_State *L);
int luaopen_zmq_Socket(lua_State *L);
}

// --=============================================== FUNCTIONS
// Functions from namespace zmq
static const struct luaL_Reg zmq_functions[] = {
  { NULL, NULL},
};

// --=============================================== CONSTANTS
// Functions from namespace zmq
static const struct dub_const_Reg zmq_const[] = {
  { "PAIR"         , PAIR                 },
  { "PUB"          , PUB                  },
  { "SUB"          , SUB                  },
  { "REQ"          , REQ                  },
  { "REP"          , REP                  },
  { "XREQ"         , XREQ                 },
  { "XREP"         , XREP                 },
  { "PULL"         , PULL                 },
  { "PUSH"         , PUSH                 },
  { "HWM"          , HWM                  },
  { "SWAP"         , SWAP                 },
  { "AFFINITY"     , AFFINITY             },
  { "IDENTITY"     , IDENTITY             },
  { "SUBSCRIBE"    , SUBSCRIBE            },
  { "UNSUBSCRIBE"  , UNSUBSCRIBE          },
  { "RATE"         , RATE                 },
  { "RECOVERY_IVL" , RECOVERY_IVL         },
  { "MCAST_LOOP"   , MCAST_LOOP           },
  { "SNDBUF"       , SNDBUF               },
  { "RCVBUF"       , RCVBUF               },
  { "RCVMORE"      , RCVMORE              },
  { "FD"           , FD                   },
  { "EVENTS"       , EVENTS               },
  { "TYPE"         , TYPE                 },
  { "LINGER"       , LINGER               },
  { "RECONNECT_IVL", RECONNECT_IVL        },
  { "BACKLOG"      , BACKLOG              },
  { "POLLIN"       , POLLIN               },
  { "POLLOUT"      , POLLOUT              },
  { NULL, 0},
};

extern "C" int luaopen_zmq_core(lua_State *L) {
  luaopen_zmq_Context(L);
  luaopen_zmq_Poller(L);
  luaopen_zmq_Socket(L);

  // Create the table which will contain all the constants
  lua_getfield(L, LUA_GLOBALSINDEX, "zmq");
  if (lua_isnil(L, -1)) {
    // no global table called zmq
    lua_pop(L, 1);
    lua_newtable(L);
    // <lib>
    lua_pushvalue(L, -1);
    // <lib> <lib>
    // _G.zmq = <lib>
    lua_setglobal(L, "zmq");
    // <lib>
  }
  // <lib>
  // register global constants
  dub_register_const(L, zmq_const);
  luaL_register(L, NULL, zmq_functions);
  // <lib>
  lua_pop(L, 1);
  return 0;
}
