/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Poller
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "zmq/Poller.h"

using namespace zmq;

/** zmq::Poller::Poller(int reserve=8)
 * include/zmq/Poller.h:94
 */
static int Poller_Poller(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      int reserve = dub_checkint(L, 1);
      Poller *retval__ = new Poller(reserve);
      dub_pushudata(L, retval__, "zmq.Poller", true);
      return 1;
    } else {
      Poller *retval__ = new Poller();
      dub_pushudata(L, retval__, "zmq.Poller", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "Poller: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Poller: Unknown exception");
  }
  return dub_error(L);
}

/** zmq::Poller::~Poller()
 * include/zmq/Poller.h:96
 */
static int Poller__Poller(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "zmq.Poller"));
    if (userdata->gc) {
      Poller *self = (Poller *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~Poller: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~Poller: Unknown exception");
  }
  return dub_error(L);
}

/** bool zmq::Poller::poll(float timeout)
 * include/zmq/Poller.h:107
 */
static int Poller_poll(lua_State *L) {
  try {
    Poller *self = *((Poller **)dub_checksdata(L, 1, "zmq.Poller"));
    float timeout = dub_checknumber(L, 2);
    lua_pushboolean(L, self->poll(timeout));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "poll: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "poll: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize zmq::Poller::events(lua_State *L)
 * include/zmq/Poller.h:166
 */
static int Poller_events(lua_State *L) {
  try {
    Poller *self = *((Poller **)dub_checksdata(L, 1, "zmq.Poller"));
    return self->events(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "events: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "events: Unknown exception");
  }
  return dub_error(L);
}

/** int zmq::Poller::add(int fd, int events)
 * include/zmq/Poller.h:184
 */
static int Poller_add(lua_State *L) {
  try {
    Poller *self = *((Poller **)dub_checksdata(L, 1, "zmq.Poller"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TNUMBER) {
      int fd = dub_checkint(L, 2);
      int events = dub_checkint(L, 3);
      lua_pushnumber(L, self->add(fd, events));
      return 1;
    } else {
      Socket *sock = *((Socket **)dub_checksdata(L, 2, "zmq.Socket"));
      int events = dub_checkint(L, 3);
      lua_pushnumber(L, self->add(sock, events));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "add: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "add: Unknown exception");
  }
  return dub_error(L);
}

/** void zmq::Poller::modify(int idx, int events, lua_State *L)
 * include/zmq/Poller.h:194
 */
static int Poller_modify(lua_State *L) {
  try {
    Poller *self = *((Poller **)dub_checksdata(L, 1, "zmq.Poller"));
    int idx = dub_checkint(L, 2);
    int events = dub_checkint(L, 3);
    self->modify(idx, events, L);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "modify: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "modify: Unknown exception");
  }
  return dub_error(L);
}

/** void zmq::Poller::remove(int idx)
 * include/zmq/Poller.h:216
 */
static int Poller_remove(lua_State *L) {
  try {
    Poller *self = *((Poller **)dub_checksdata(L, 1, "zmq.Poller"));
    int idx = dub_checkint(L, 2);
    self->remove(idx);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "remove: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "remove: Unknown exception");
  }
  return dub_error(L);
}

/** int zmq::Poller::count()
 * include/zmq/Poller.h:242
 */
static int Poller_count(lua_State *L) {
  try {
    Poller *self = *((Poller **)dub_checksdata(L, 1, "zmq.Poller"));
    lua_pushnumber(L, self->count());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "count: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "count: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize zmq::Poller::idxToPos(int idx, lua_State *L)
 * include/zmq/Poller.h:249
 */
static int Poller_idxToPos(lua_State *L) {
  try {
    Poller *self = *((Poller **)dub_checksdata(L, 1, "zmq.Poller"));
    int idx = dub_checkint(L, 2);
    return self->idxToPos(idx, L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "idxToPos: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "idxToPos: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize zmq::Poller::posToIdx(int pos, lua_State *L)
 * include/zmq/Poller.h:258
 */
static int Poller_posToIdx(lua_State *L) {
  try {
    Poller *self = *((Poller **)dub_checksdata(L, 1, "zmq.Poller"));
    int pos = dub_checkint(L, 2);
    return self->posToIdx(pos, L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "posToIdx: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "posToIdx: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize zmq::Poller::posToFd(int pos, lua_State *L)
 * include/zmq/Poller.h:267
 */
static int Poller_posToFd(lua_State *L) {
  try {
    Poller *self = *((Poller **)dub_checksdata(L, 1, "zmq.Poller"));
    int pos = dub_checkint(L, 2);
    return self->posToFd(pos, L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "posToFd: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "posToFd: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize zmq::Poller::posToEvent(int pos, lua_State *L)
 * include/zmq/Poller.h:276
 */
static int Poller_posToEvent(lua_State *L) {
  try {
    Poller *self = *((Poller **)dub_checksdata(L, 1, "zmq.Poller"));
    int pos = dub_checkint(L, 2);
    return self->posToEvent(pos, L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "posToEvent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "posToEvent: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int Poller___tostring(lua_State *L) {
  Poller *self = *((Poller **)dub_checksdata_n(L, 1, "zmq.Poller"));
  lua_pushfstring(L, "zmq.Poller: %p (%f)", self, self-> count());
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Poller_member_methods[] = {
  { "new"          , Poller_Poller        },
  { "__gc"         , Poller__Poller       },
  { "poll"         , Poller_poll          },
  { "events"       , Poller_events        },
  { "add"          , Poller_add           },
  { "modify"       , Poller_modify        },
  { "remove"       , Poller_remove        },
  { "count"        , Poller_count         },
  { "idxToPos"     , Poller_idxToPos      },
  { "posToIdx"     , Poller_posToIdx      },
  { "posToFd"      , Poller_posToFd       },
  { "posToEvent"   , Poller_posToEvent    },
  { "__tostring"   , Poller___tostring    },
  { NULL, NULL},
};


extern "C" int luaopen_zmq_Poller(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "zmq.Poller");
  // <mt>

  // register member methods
  luaL_register(L, NULL, Poller_member_methods);
  // save meta-table in zmq
  dub_register(L, "zmq", "Poller_core");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
