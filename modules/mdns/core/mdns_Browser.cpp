/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Browser
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mdns/Browser.h"

using namespace mdns;

/** mdns::Browser::Browser(mdns::Context *ctx, const char *service_type)
 * include/mdns/Browser.h:65
 */
static int Browser_Browser(lua_State *L) {
  try {
    Context *ctx = *((Context **)dub_checksdata(L, 1, "mdns.Context"));
    const char *service_type = dub_checkstring(L, 2);
    Browser *retval__ = new Browser(ctx, service_type);
    retval__->pushobject(L, retval__, "mdns.Browser", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "mdns.Browser.Browser: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mdns.Browser.Browser: Unknown exception");
  }
  return dub_error(L);
}

/** mdns::Browser::~Browser()
 * include/mdns/Browser.h:67
 */
static int Browser__Browser(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mdns.Browser"));
    if (userdata->gc) {
      Browser *self = (Browser *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "mdns.Browser.~Browser: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mdns.Browser.~Browser: Unknown exception");
  }
  return dub_error(L);
}

/** const char* mdns::Browser::serviceType()
 * include/mdns/Browser.h:69
 */
static int Browser_serviceType(lua_State *L) {
  try {
    Browser *self = *((Browser **)dub_checksdata(L, 1, "mdns.Browser"));
    lua_pushstring(L, self->serviceType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "mdns.Browser.serviceType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mdns.Browser.serviceType: Unknown exception");
  }
  return dub_error(L);
}

/** int mdns::Browser::fd()
 * include/mdns/Browser.h:75
 */
static int Browser_fd(lua_State *L) {
  try {
    Browser *self = *((Browser **)dub_checksdata(L, 1, "mdns.Browser"));
    lua_pushnumber(L, self->fd());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "mdns.Browser.fd: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mdns.Browser.fd: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize mdns::Browser::getService(lua_State *L)
 * include/mdns/Browser.h:83
 */
static int Browser_getService(lua_State *L) {
  try {
    Browser *self = *((Browser **)dub_checksdata(L, 1, "mdns.Browser"));
    return self->getService(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "mdns.Browser.getService: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mdns.Browser.getService: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int Browser___tostring(lua_State *L) {
  Browser *self = *((Browser **)dub_checksdata_n(L, 1, "mdns.Browser"));
  lua_pushfstring(L, "mdns.Browser: %p (%s)", self, self-> serviceType());
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Browser_member_methods[] = {
  { "new"          , Browser_Browser      },
  { "__gc"         , Browser__Browser     },
  { "serviceType"  , Browser_serviceType  },
  { "fd"           , Browser_fd           },
  { "getService"   , Browser_getService   },
  { "__tostring"   , Browser___tostring   },
  { NULL, NULL},
};


extern "C" int luaopen_mdns_Browser(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mdns.Browser");
  // <mt>

  // register member methods
  luaL_register(L, NULL, Browser_member_methods);
  // save meta-table in mdns
  dub_register(L, "mdns", "Browser_core");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
