/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Registration
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mdns/Registration.h"

using namespace mdns;

/** mdns::Registration::Registration(Context *ctx, const char *service_type, const char *name, int port, const char *txt)
 * include/mdns/Registration.h:58
 */
static int Registration_Registration(lua_State *L) {
  try {
    Context *ctx = *((Context **)dub_checksdata(L, 1, "mdns.Context"));
    const char *service_type = dub_checkstring(L, 2);
    const char *name = dub_checkstring(L, 3);
    int port = dub_checkint(L, 4);
    const char *txt = dub_checkstring(L, 5);
    Registration *retval__ = new Registration(ctx, service_type, name, port, txt);
    retval__->pushobject(L, retval__, "mdns.Registration", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "Registration: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "Registration: Unknown exception");
  }
  return dub_error(L);
}

/** mdns::Registration::~Registration()
 * include/mdns/Registration.h:60
 */
static int Registration__Registration(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mdns.Registration"));
    if (userdata->gc) {
      Registration *self = (Registration *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~Registration: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~Registration: Unknown exception");
  }
  return dub_error(L);
}

/** int mdns::Registration::fd()
 * include/mdns/Registration.h:62
 */
static int Registration_fd(lua_State *L) {
  try {
    Registration *self = *((Registration **)dub_checksdata(L, 1, "mdns.Registration"));
    lua_pushnumber(L, self->fd());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "fd: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "fd: Unknown exception");
  }
  return dub_error(L);
}

/** void mdns::Registration::start()
 * include/mdns/Registration.h:68
 */
static int Registration_start(lua_State *L) {
  try {
    Registration *self = *((Registration **)dub_checksdata(L, 1, "mdns.Registration"));
    self->start();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "start: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "start: Unknown exception");
  }
  return dub_error(L);
}

/** void mdns::Registration::stop()
 * include/mdns/Registration.h:72
 */
static int Registration_stop(lua_State *L) {
  try {
    Registration *self = *((Registration **)dub_checksdata(L, 1, "mdns.Registration"));
    self->stop();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "stop: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "stop: Unknown exception");
  }
  return dub_error(L);
}

/** const char* mdns::Registration::name()
 * include/mdns/Registration.h:74
 */
static int Registration_name(lua_State *L) {
  try {
    Registration *self = *((Registration **)dub_checksdata(L, 1, "mdns.Registration"));
    lua_pushstring(L, self->name());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "name: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "name: Unknown exception");
  }
  return dub_error(L);
}

/** LuaStackSize mdns::Registration::getService(lua_State *L)
 * include/mdns/Registration.h:80
 */
static int Registration_getService(lua_State *L) {
  try {
    Registration *self = *((Registration **)dub_checksdata(L, 1, "mdns.Registration"));
    return self->getService(L);
  } catch (std::exception &e) {
    lua_pushfstring(L, "getService: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getService: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int Registration___tostring(lua_State *L) {
  Registration *self = *((Registration **)dub_checksdata_n(L, 1, "mdns.Registration"));
  lua_pushfstring(L, "mdns.Registration: %p (%s)", self, self-> name());
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Registration_member_methods[] = {
  { "new"          , Registration_Registration },
  { "__gc"         , Registration__Registration },
  { "fd"           , Registration_fd      },
  { "start"        , Registration_start   },
  { "stop"         , Registration_stop    },
  { "name"         , Registration_name    },
  { "getService"   , Registration_getService },
  { "__tostring"   , Registration___tostring },
  { NULL, NULL},
};


extern "C" int luaopen_mdns_Registration(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mdns.Registration");
  // <mt>

  // register member methods
  luaL_register(L, NULL, Registration_member_methods);
  // save meta-table in mdns
  dub_register(L, "mdns", "Registration_core");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
