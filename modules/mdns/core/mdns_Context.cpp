/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class Context
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "mdns/Context.h"

using namespace mdns;

/** mdns::Context::Context()
 * modules/mdns/include/mdns/Context.h:49
 */
static int Context_Context(lua_State *L) {
  try {
    Context *retval__ = new Context();
    retval__->pushobject(L, retval__, "mdns.Context", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "mdns.Context.Context: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mdns.Context.Context: Unknown exception");
  }
  return dub_error(L);
}

/** mdns::Context::~Context()
 * modules/mdns/include/mdns/Context.h:51
 */
static int Context__Context(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "mdns.Context"));
    if (userdata->gc) {
      Context *self = (Context *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "mdns.Context.~Context: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mdns.Context.~Context: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int Context___tostring(lua_State *L) {
  Context *self = *((Context **)dub_checksdata_n(L, 1, "mdns.Context"));
  lua_pushfstring(L, "mdns.Context: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg Context_member_methods[] = {
  { "new"          , Context_Context      },
  { "__gc"         , Context__Context     },
  { "__tostring"   , Context___tostring   },
  { NULL, NULL},
};


extern "C" int luaopen_mdns_Context(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "mdns.Context");
  // <mt>

  // register member methods
  luaL_register(L, NULL, Context_member_methods);
  // save meta-table in mdns
  dub_register(L, "mdns", "Context_core");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
