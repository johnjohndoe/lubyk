#include "opencv/cv.h"

#include "lua_dub_helper.h"

using namespace cv;

// Register namespace


static const struct lua_constants_Reg cv_namespace_constants[] = {
  {"BORDER_REPLICATE"              , cv::BORDER_REPLICATE},
  {"BORDER_CONSTANT"               , cv::BORDER_CONSTANT},
  {"BORDER_REFLECT"                , cv::BORDER_REFLECT},
  {"BORDER_REFLECT_101"            , cv::BORDER_REFLECT_101},
  {"BORDER_REFLECT101"             , cv::BORDER_REFLECT101},
  {"BORDER_WRAP"                   , cv::BORDER_WRAP},
  {"BORDER_TRANSPARENT"            , cv::BORDER_TRANSPARENT},
  {"BORDER_DEFAULT"                , cv::BORDER_DEFAULT},
  {"BORDER_ISOLATED"               , cv::BORDER_ISOLATED},
  {"KERNEL_GENERAL"                , cv::KERNEL_GENERAL},
  {"KERNEL_SYMMETRICAL"            , cv::KERNEL_SYMMETRICAL},
  {"KERNEL_ASYMMETRICAL"           , cv::KERNEL_ASYMMETRICAL},
  {"KERNEL_SMOOTH"                 , cv::KERNEL_SMOOTH},
  {"KERNEL_INTEGER"                , cv::KERNEL_INTEGER},
  {"MORPH_ERODE"                   , cv::MORPH_ERODE},
  {"MORPH_DILATE"                  , cv::MORPH_DILATE},
  {"MORPH_OPEN"                    , cv::MORPH_OPEN},
  {"MORPH_CLOSE"                   , cv::MORPH_CLOSE},
  {"MORPH_GRADIENT"                , cv::MORPH_GRADIENT},
  {"MORPH_TOPHAT"                  , cv::MORPH_TOPHAT},
  {"MORPH_BLACKHAT"                , cv::MORPH_BLACKHAT},
  {"MORPH_RECT"                    , cv::MORPH_RECT},
  {"MORPH_CROSS"                   , cv::MORPH_CROSS},
  {"MORPH_ELLIPSE"                 , cv::MORPH_ELLIPSE},
  {"INTER_NEAREST"                 , cv::INTER_NEAREST},
  {"INTER_LINEAR"                  , cv::INTER_LINEAR},
  {"INTER_CUBIC"                   , cv::INTER_CUBIC},
  {"INTER_AREA"                    , cv::INTER_AREA},
  {"INTER_LANCZOS4"                , cv::INTER_LANCZOS4},
  {"INTER_MAX"                     , cv::INTER_MAX},
  {"WARP_INVERSE_MAP"              , cv::WARP_INVERSE_MAP},
  {"THRESH_BINARY"                 , cv::THRESH_BINARY},
  {"THRESH_BINARY_INV"             , cv::THRESH_BINARY_INV},
  {"THRESH_TRUNC"                  , cv::THRESH_TRUNC},
  {"THRESH_TOZERO"                 , cv::THRESH_TOZERO},
  {"THRESH_TOZERO_INV"             , cv::THRESH_TOZERO_INV},
  {"THRESH_MASK"                   , cv::THRESH_MASK},
  {"THRESH_OTSU"                   , cv::THRESH_OTSU},
  {"ADAPTIVE_THRESH_MEAN_C"        , cv::ADAPTIVE_THRESH_MEAN_C},
  {"ADAPTIVE_THRESH_GAUSSIAN_C"    , cv::ADAPTIVE_THRESH_GAUSSIAN_C},
  {"OPTFLOW_USE_INITIAL_FLOW"      , cv::OPTFLOW_USE_INITIAL_FLOW},
  {"OPTFLOW_FARNEBACK_GAUSSIAN"    , cv::OPTFLOW_FARNEBACK_GAUSSIAN},
  {"GC_BGD"                        , cv::GC_BGD},
  {"GC_FGD"                        , cv::GC_FGD},
  {"GC_PR_BGD"                     , cv::GC_PR_BGD},
  {"GC_PR_FGD"                     , cv::GC_PR_FGD},
  {"GC_INIT_WITH_RECT"             , cv::GC_INIT_WITH_RECT},
  {"GC_INIT_WITH_MASK"             , cv::GC_INIT_WITH_MASK},
  {"GC_EVAL"                       , cv::GC_EVAL},
  {"INPAINT_NS"                    , cv::INPAINT_NS},
  {"INPAINT_TELEA"                 , cv::INPAINT_TELEA},
  {"FLOODFILL_FIXED_RANGE"         , cv::FLOODFILL_FIXED_RANGE},
  {"FLOODFILL_MASK_ONLY"           , cv::FLOODFILL_MASK_ONLY},
  {"TM_SQDIFF"                     , cv::TM_SQDIFF},
  {"TM_SQDIFF_NORMED"              , cv::TM_SQDIFF_NORMED},
  {"TM_CCORR"                      , cv::TM_CCORR},
  {"TM_CCORR_NORMED"               , cv::TM_CCORR_NORMED},
  {"TM_CCOEFF"                     , cv::TM_CCOEFF},
  {"TM_CCOEFF_NORMED"              , cv::TM_CCOEFF_NORMED},
  {"RETR_EXTERNAL"                 , cv::RETR_EXTERNAL},
  {"RETR_LIST"                     , cv::RETR_LIST},
  {"RETR_CCOMP"                    , cv::RETR_CCOMP},
  {"RETR_TREE"                     , cv::RETR_TREE},
  {"CHAIN_APPROX_NONE"             , cv::CHAIN_APPROX_NONE},
  {"CHAIN_APPROX_SIMPLE"           , cv::CHAIN_APPROX_SIMPLE},
  {"CHAIN_APPROX_TC89_L1"          , cv::CHAIN_APPROX_TC89_L1},
  {"CHAIN_APPROX_TC89_KCOS"        , cv::CHAIN_APPROX_TC89_KCOS},
  {"LMEDS"                         , cv::LMEDS},
  {"RANSAC"                        , cv::RANSAC},
  {"CALIB_CB_ADAPTIVE_THRESH"      , cv::CALIB_CB_ADAPTIVE_THRESH},
  {"CALIB_CB_NORMALIZE_IMAGE"      , cv::CALIB_CB_NORMALIZE_IMAGE},
  {"CALIB_CB_FILTER_QUADS"         , cv::CALIB_CB_FILTER_QUADS},
  {"CALIB_USE_INTRINSIC_GUESS"     , cv::CALIB_USE_INTRINSIC_GUESS},
  {"CALIB_FIX_ASPECT_RATIO"        , cv::CALIB_FIX_ASPECT_RATIO},
  {"CALIB_FIX_PRINCIPAL_POINT"     , cv::CALIB_FIX_PRINCIPAL_POINT},
  {"CALIB_ZERO_TANGENT_DIST"       , cv::CALIB_ZERO_TANGENT_DIST},
  {"CALIB_FIX_FOCAL_LENGTH"        , cv::CALIB_FIX_FOCAL_LENGTH},
  {"CALIB_FIX_K1"                  , cv::CALIB_FIX_K1},
  {"CALIB_FIX_K2"                  , cv::CALIB_FIX_K2},
  {"CALIB_FIX_K3"                  , cv::CALIB_FIX_K3},
  {"CALIB_FIX_INTRINSIC"           , cv::CALIB_FIX_INTRINSIC},
  {"CALIB_SAME_FOCAL_LENGTH"       , cv::CALIB_SAME_FOCAL_LENGTH},
  {"CALIB_ZERO_DISPARITY"          , cv::CALIB_ZERO_DISPARITY},
  {"FM_7POINT"                     , cv::FM_7POINT},
  {"FM_8POINT"                     , cv::FM_8POINT},
  {"FM_LMEDS"                      , cv::FM_LMEDS},
  {"FM_RANSAC"                     , cv::FM_RANSAC},
  {"MAGIC_MASK"                    , cv::MAGIC_MASK},
  {"TYPE_MASK"                     , cv::TYPE_MASK},
  {"DEPTH_MASK"                    , cv::DEPTH_MASK},
  {"DECOMP_LU"                     , cv::DECOMP_LU},
  {"DECOMP_SVD"                    , cv::DECOMP_SVD},
  {"DECOMP_EIG"                    , cv::DECOMP_EIG},
  {"DECOMP_CHOLESKY"               , cv::DECOMP_CHOLESKY},
  {"DECOMP_QR"                     , cv::DECOMP_QR},
  {"DECOMP_NORMAL"                 , cv::DECOMP_NORMAL},
  {"NORM_INF"                      , cv::NORM_INF},
  {"NORM_L1"                       , cv::NORM_L1},
  {"NORM_L2"                       , cv::NORM_L2},
  {"NORM_TYPE_MASK"                , cv::NORM_TYPE_MASK},
  {"NORM_RELATIVE"                 , cv::NORM_RELATIVE},
  {"NORM_MINMAX"                   , cv::NORM_MINMAX},
  {"CMP_EQ"                        , cv::CMP_EQ},
  {"CMP_GT"                        , cv::CMP_GT},
  {"CMP_GE"                        , cv::CMP_GE},
  {"CMP_LT"                        , cv::CMP_LT},
  {"CMP_LE"                        , cv::CMP_LE},
  {"CMP_NE"                        , cv::CMP_NE},
  {"GEMM_1_T"                      , cv::GEMM_1_T},
  {"GEMM_2_T"                      , cv::GEMM_2_T},
  {"GEMM_3_T"                      , cv::GEMM_3_T},
  {"DFT_INVERSE"                   , cv::DFT_INVERSE},
  {"DFT_SCALE"                     , cv::DFT_SCALE},
  {"DFT_ROWS"                      , cv::DFT_ROWS},
  {"DFT_COMPLEX_OUTPUT"            , cv::DFT_COMPLEX_OUTPUT},
  {"DFT_REAL_OUTPUT"               , cv::DFT_REAL_OUTPUT},
  {"DCT_INVERSE"                   , cv::DCT_INVERSE},
  {"DCT_ROWS"                      , cv::DCT_ROWS},
  {"KMEANS_RANDOM_CENTERS"         , cv::KMEANS_RANDOM_CENTERS},
  {"KMEANS_PP_CENTERS"             , cv::KMEANS_PP_CENTERS},
  {"KMEANS_USE_INITIAL_LABELS"     , cv::KMEANS_USE_INITIAL_LABELS},
  {"FONT_HERSHEY_SIMPLEX"          , cv::FONT_HERSHEY_SIMPLEX},
  {"FONT_HERSHEY_PLAIN"            , cv::FONT_HERSHEY_PLAIN},
  {"FONT_HERSHEY_DUPLEX"           , cv::FONT_HERSHEY_DUPLEX},
  {"FONT_HERSHEY_COMPLEX"          , cv::FONT_HERSHEY_COMPLEX},
  {"FONT_HERSHEY_TRIPLEX"          , cv::FONT_HERSHEY_TRIPLEX},
  {"FONT_HERSHEY_COMPLEX_SMALL"    , cv::FONT_HERSHEY_COMPLEX_SMALL},
  {"FONT_HERSHEY_SCRIPT_SIMPLEX"   , cv::FONT_HERSHEY_SCRIPT_SIMPLEX},
  {"FONT_HERSHEY_SCRIPT_COMPLEX"   , cv::FONT_HERSHEY_SCRIPT_COMPLEX},
  {"FONT_ITALIC"                   , cv::FONT_ITALIC},
  
  {"CV_8UC1"                       , CV_8UC1},
  {"CV_8UC2"                       , CV_8UC2},
  {"CV_8UC3"                       , CV_8UC3},
  {"CV_8UC4"                       , CV_8UC4},
  {"CV_8SC1"                       , CV_8SC1},
  {"CV_8SC2"                       , CV_8SC2},
  {"CV_8SC3"                       , CV_8SC3},
  {"CV_8SC4"                       , CV_8SC4},
  {"CV_16UC1"                      , CV_16UC1},
  {"CV_16UC2"                      , CV_16UC2},
  {"CV_16UC3"                      , CV_16UC3},
  {"CV_16UC4"                      , CV_16UC4},
  {"CV_16SC1"                      , CV_16SC1},
  {"CV_16SC2"                      , CV_16SC2},
  {"CV_16SC3"                      , CV_16SC3},
  {"CV_16SC4"                      , CV_16SC4},
  {"CV_32SC1"                      , CV_32SC1},
  {"CV_32SC2"                      , CV_32SC2},
  {"CV_32SC3"                      , CV_32SC3},
  {"CV_32SC4"                      , CV_32SC4},
  {"CV_32FC1"                      , CV_32FC1},
  {"CV_32FC2"                      , CV_32FC2},
  {"CV_32FC3"                      , CV_32FC3},
  {"CV_32FC4"                      , CV_32FC4},
  {"CV_64FC1"                      , CV_64FC1},
  {"CV_64FC2"                      , CV_64FC2},
  {"CV_64FC3"                      , CV_64FC3},
  {"CV_64FC4"                      , CV_64FC4},
  {NULL, NULL},
};


void luaopen_cv(lua_State *L) {
  // register member methods (functions)
  //luaL_register(L, NULL, cv_member_methods);


  // register namespace enums
  register_constants(L, "cv", cv_namespace_constants);

}
