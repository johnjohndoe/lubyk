#!/usr/bin/env lua
-- Lubyk alters the search path to only work with it's own
-- global directory, the user's personal lib and the current
-- path's lib.
-- local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/local/lib/lua/5.1/?.lua;/usr/local/lib/lua/5.1/?/init.lua
--package.path = "./?.lua;./lib/?.lua"
require 'lubyk'

local action = arg[1]
table.remove(arg, 1)
if action == '--test' or action == '-t' then
  require 'test'
  local all = test.all
  test.all = function() end -- dummy

  test.load_all(unpack(arg))
  all()
end

-- TODO: Transform this to a command line (lk.Command()) that we could use to do everything that
-- we can do with the GUI.
--
-- For now simply enable the "-e" (exec) mode with the command to halt all local processes related to
-- lubyk:
-- > lubyk --zone default '/*/lk/quit'
-- Which is the same as
-- > lubyk --zone default quit
-- Or (by using .lubykrc for default zone)
-- > lubyk quit
--
-- To stop only process "a"
-- > lubyk --zone default /a/lk/quit
-- > lubyk --zone default quit a
--
-- Command format:
-- /[URL] {arg, ...}
--
-- CMD {target (default=*)} {arg, ...}
-- ==
-- /target/lk/CMD {arg, ...}

if action == 'quit' then
  lk.Command'/*/lk/quit'
elseif action == 'hello' then
  app = mimas.Application()
  dlg = editor.SimpleDialog {
    message = 'Lubyk works!',
    ok = 'Ok',
  }
  function dlg:ok()
    app:quit()
  end
  dlg:resize(200,200)
  dlg:move(400, 400)
  dlg:show()
  app:exec()
else
  lk.Command(action)
end
